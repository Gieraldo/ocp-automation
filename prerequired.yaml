---
- name: Prerequired Check OpenShift Cluster
  hosts: localhost
  become: true
  vars:
    openshift_script_curl_path: "script/curl.sh"
    openshift_script_health_path: "script/cluster-health.sh"
    vcenter_ip: "172.31.16.254"

  tasks:

    - name: 🛠️ Ensure cluster-health.sh script is executable
      file:
        path: "{{ openshift_script_health_path }}"
        mode: '0755'
        state: file

    - name: ▶️ Run cluster-health.sh script
      command: "{{ openshift_script_health_path }}"
      register: curl_script_health_output
      ignore_errors: true

    - name: 📄 Output from cluster-health.sh
      debug:
        var: curl_script_health_output.stdout_lines

    - name: 🛠️ Ensure curl.sh script is executable
      file:
        path: "{{ openshift_script_curl_path }}"
        mode: '0755'
        state: file

    - name: ▶️ Run curl.sh script (Red Hat whitelist check)
      command: "{{ openshift_script_curl_path }}"
      register: curl_script_output
      ignore_errors: true

    - name: 📄 Output from curl.sh
      debug:
        var: curl_script_output.stdout_lines

    - name: 🌐 Check connection to vCenter Datastore from master node
      shell: curl -vk telnet://{{ vcenter_ip }}:443
      register: vcenter_check_output
      ignore_errors: true

    - name: 📄 vCenter connection result
      debug:
        var: vcenter_check_output.stdout_lines

    - name: 🔁 Check PTR Records for all OpenShift nodes
      shell: |
        for host in $(hostname -i); do
          ip=$(hostname -i)
          ptr=$(dig +short -x "$ip")
          echo "$host ($ip) -> $ptr"
        done
      register: ptr_check_output
      ignore_errors: true

    - name: 📄 PTR record check result
      debug:
        var: ptr_check_output.stdout_lines

    # - name: 🔁 Check PTR Records for all OpenShift nodes
    #   shell: |
    #     for host in $(oc get nodes -o name | awk -F/ '{print $2}'); do
    #       ip=$(oc get node "$host" -o jsonpath='{.status.addresses[?(@.type=="InternalIP")].address}')
    #       ptr=$(dig +short -x "$ip")
    #       echo "$host ($ip) -> $ptr"
    #     done
    #   register: ptr_check_output
    #   ignore_errors: true

    # - name: 📄 PTR record check result
    #   debug:
    #     var: ptr_check_output.stdout_lines

    # ⏰ NTP Sync check
    - name: ⏰ Check NTP sync status
      shell: timedatectl status | grep "System clock synchronized"
      register: ntp_status
      ignore_errors: true

    - name: 📄 NTP status
      debug:
        var: ntp_status.stdout_lines

    # # 📦 PVC status check
    # - name: 📦 Check PVC status in all namespaces
    #   shell: oc get pvc --all-namespaces
    #   register: pvc_status
    #   ignore_errors: true

    # - name: 📄 PVC status output
    #   debug:
    #     var: pvc_status.stdout_lines

    # 🚨 Pods not running
    # - name: 🚨 Check for pods not in Running state
    #   shell: oc get pods --all-namespaces --field-selector=status.phase!=Running
    #   register: pods_not_running
    #   ignore_errors: true

    # - name: 📄 Pods not in Running phase
    #   debug:
    #     var: pods_not_running.stdout_lines

    # # 🔐 Check API server version
    # - name: 🔐 Check API Server version
    #   shell: |
    #     curl -k https://api.$(oc get infrastructure cluster -o jsonpath='{.status.apiServerInternalURI}' | sed 's|https://api\.||' | sed 's|:.*||')/version
    #   register: api_version
    #   ignore_errors: true

    # - name: 📄 API Server version info
    #   debug:
    #     var: api_version.stdout_lines

    - name: 🌐 Check nslookup api.openshift
      shell: |
        nslookup https://api.$(oc get infrastructure cluster -o jsonpath='{.status.apiServerInternalURI}'
      register: nslookup_result
      ignore_errors: true
    
    - name: 📄 Result nslookup API
      debug: 
        var: nslookup_result.stdout_lines
    
